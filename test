import net.javacrumbs.shedlock.core.LockConfiguration;
import net.javacrumbs.shedlock.core.LockProvider;
import net.javacrumbs.shedlock.core.SimpleLock;
import org.aopalliance.intercept.MethodInterceptor;
import org.aopalliance.intercept.MethodInvocation;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.integration.config.EnableIntegration;
import org.springframework.integration.dsl.IntegrationFlow;
import org.springframework.integration.dsl.IntegrationFlows;
import org.springframework.integration.dsl.Pollers;
import org.springframework.integration.file.dsl.Files;
import org.springframework.messaging.MessageChannel;
import org.springframework.integration.channel.DirectChannel;

import java.io.File;
import java.time.Duration;
import java.util.Optional;

@Configuration
@EnableIntegration
public class IntegrationConfig {

    @Bean
    public MessageChannel fileInputChannel() {
        return new DirectChannel();
    }

    @Bean
    public IntegrationFlow fileReadingFlow(LockProvider lockProvider) {
        return IntegrationFlows.from(Files.inboundAdapter(new File("/path/to/directory"))
                        .patternFilter("*.txt"),
                e -> e.poller(Pollers.fixedDelay(1000).advice(shedLockAdvice(lockProvider))))
                .channel(fileInputChannel())
                .handle(fileProcessor(), "process")
                .get();
    }

    @Bean
    public FileProcessor fileProcessor() {
        return new FileProcessor();
    }

    @Bean
    public MethodInterceptor shedLockAdvice(LockProvider lockProvider) {
        return new MethodInterceptor() {
            @Override
            public Object invoke(MethodInvocation invocation) throws Throwable {
                LockConfiguration lockConfiguration = new LockConfiguration(
                        ClockProvider.now(), "fileReadingFlow.lock", 
                        Duration.ofSeconds(30), Duration.ofSeconds(10));
                
                Optional<SimpleLock> lock = lockProvider.lock(lockConfiguration);

                if (lock.isPresent()) {
                    try {
                        return invocation.proceed();
                    } finally {
                        lock.get().unlock();
                    }
                } else {
                    System.out.println("Lock not acquired, skipping execution");
                    return null;
                }
            }
        };
    }
}
