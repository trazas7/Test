
import com.jcraft.jsch.ChannelSftp;
import org.springframework.integration.dsl.IntegrationFlow;
import org.springframework.integration.dsl.IntegrationFlows;
import org.springframework.integration.file.filters.CompositeFileListFilter;
import org.springframework.integration.file.filters.FileSystemPersistentAcceptOnceFileListFilter;
import org.springframework.integration.file.filters.SftpPersistentAcceptOnceFileListFilter;
import org.springframework.integration.sftp.dsl.Sftp;
import org.springframework.integration.sftp.session.DefaultSftpSessionFactory;
import org.springframework.integration.metadata.ConcurrentMetadataStore;
import org.springframework.integration.metadata.SimpleMetadataStore;
import org.springframework.integration.dsl.Pollers;

import java.io.File;
import java.util.concurrent.TimeUnit;

public class SftpIntegrationFlow {

    public IntegrationFlow getIntegrationFlow(String aggregatorName, String flowid, ConcurrentMetadataStore metadataStore) {
        DefaultSftpSessionFactory sf = sftpSessionFactory(aggregatorName);
        if (sf != null) {
            CompositeFileListFilter<ChannelSftp.LsEntry> compositeFilter = new CompositeFileListFilter<>();
            compositeFilter.addFilter(new SftpPersistentAcceptOnceFileListFilter(metadataStore, "INT_"));
            compositeFilter.addFilter(new FileSystemPersistentAcceptOnceFileListFilter<>(new SimpleMetadataStore(), "INT_FS_"));

            return IntegrationFlows.from(Sftp.inboundAdapter(sf)
                        .preserveTimestamp(true)
                        .autoCreateLocalDirectory(true)
                        .remoteDirectory(nodes.getAggregators().get(aggregatorName).getInputFolder())
                        .localDirectory(new File(nodes.getBaseFolder() + "/" + aggregatorName))
                        .filter(compositeFilter),
                    e -> e.id(flowid)
                         .autoStartup(true)
                         .poller(Pollers.fixedDelay(nodes.getPollIntervalSecs(), TimeUnit.SECONDS)))
                .filter(source -> ((File) source).getName().endsWith(fileSuffix))
                .channel("nullChannel")
                .get();
        }
        return null;
    }

    private DefaultSftpSessionFactory sftpSessionFactory(String aggregatorName) {
        // Implementation for creating and returning an SFTP session factory
        // based on the aggregatorName, which is not provided in the initial code.
        // Assume some configurations and initialization here.
        return new DefaultSftpSessionFactory();
    }
    
    // Assuming nodes is a placeholder for your configuration object
    private Nodes nodes;
    private String fileSuffix;
}
