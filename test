@Service
public class FileLockingService {

    @Autowired
    private LockProvider lockProvider;

    public Advice fileProcessingAdvice(String lockKey) {
        return new DefaultLockingTaskExecutor(lockProvider, lockConfigurationBuilder -> {
            lockConfigurationBuilder
                .withLockAtMostFor(Duration.ofMinutes(10))
                .withLockAtLeastFor(Duration.ofMinutes(1));
            return lockConfigurationBuilder;
        }, lockKey);
    }
}


@Component
public class TxtFileAggregator implements AggregatorContentProcessor {

    @Autowired
    private FileLockingService fileLockingService;

    @Override
    @Bean
    public IntegrationFlow setupFlow() {
        return IntegrationFlows.from(Files.inboundAdapter(new File("/path/to/txtFiles"))
                                .patternFilter("*.txt"),
                        e -> e.poller(Pollers.fixedDelay(1000)
                                          .advice(fileProcessingAdviceForFiles())))
                .handle(this::process)
                .get();
    }

    private Advice fileProcessingAdviceForFiles() {
        ExpressionEvaluatingRequestHandlerAdvice advice = new ExpressionEvaluatingRequestHandlerAdvice();
        advice.setOnSuccessExpressionString("@fileLockingService.fileProcessingAdvice(payload.absolutePath)");
        advice.setPropagateEvaluationFailures(false);
        return advice;
    }

    private void process(File file) {
        System.out.println("Processing TXT file: " + file.getName());
    }
}
